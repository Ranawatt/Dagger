// Generated by Dagger (https://dagger.dev).
package com.example.dagger.di.components;

import com.example.dagger.data.local.DatabaseService;
import com.example.dagger.data.remote.NetworkService;
import com.example.dagger.di.modules.ActivityModule;
import com.example.dagger.ui.MainActivity;
import com.example.dagger.ui.MainActivity_MembersInjector;
import com.example.dagger.ui.MainViewModel;
import com.example.dagger.ui.MainViewModel_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<DatabaseService> getDatabaseServiceProvider;

  private Provider<NetworkService> getNetworkServiceProvider;

  private Provider<MainViewModel> mainViewModelProvider;

  private DaggerActivityComponent(ApplicationComponent applicationComponentParam) {

    initialize(applicationComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationComponent applicationComponentParam) {
    this.getDatabaseServiceProvider = new com_example_dagger_di_components_ApplicationComponent_getDatabaseService(applicationComponentParam);
    this.getNetworkServiceProvider = new com_example_dagger_di_components_ApplicationComponent_getNetworkService(applicationComponentParam);
    this.mainViewModelProvider = DoubleCheck.provider(MainViewModel_Factory.create(getDatabaseServiceProvider, getNetworkServiceProvider));
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMainViewModel(instance, mainViewModelProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationComponent applicationComponent;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder activityModule(ActivityModule activityModule) {
      Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new DaggerActivityComponent(applicationComponent);
    }
  }

  private static class com_example_dagger_di_components_ApplicationComponent_getDatabaseService implements Provider<DatabaseService> {
    private final ApplicationComponent applicationComponent;

    com_example_dagger_di_components_ApplicationComponent_getDatabaseService(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public DatabaseService get() {
      return Preconditions.checkNotNull(applicationComponent.getDatabaseService(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class com_example_dagger_di_components_ApplicationComponent_getNetworkService implements Provider<NetworkService> {
    private final ApplicationComponent applicationComponent;

    com_example_dagger_di_components_ApplicationComponent_getNetworkService(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public NetworkService get() {
      return Preconditions.checkNotNull(applicationComponent.getNetworkService(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
