// Generated by Dagger (https://google.github.io/dagger).
package com.example.dagger.di.components;

import com.example.dagger.di.modules.ActivityModule;
import com.example.dagger.ui.MainActivity;
import com.example.dagger.ui.MainActivity_MembersInjector;
import com.example.dagger.ui.MainViewModel;
import dagger.internal.Preconditions;

public final class DaggerActivityComponent implements ActivityComponent {
  private ApplicationComponent applicationComponent;

  private DaggerActivityComponent(Builder builder) {
    this.applicationComponent = builder.applicationComponent;
  }

  public static Builder builder() {
    return new Builder();
  }

  private MainViewModel getMainViewModel() {
    return new MainViewModel(
        Preconditions.checkNotNull(
            applicationComponent.getDatabaseService(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getNetworkService(),
            "Cannot return null from a non-@Nullable component method"));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMainViewModel(instance, getMainViewModel());
    return instance;
  }

  public static final class Builder {
    private ApplicationComponent applicationComponent;

    private Builder() {}

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new DaggerActivityComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder activityModule(ActivityModule activityModule) {
      Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
