// Generated by Dagger (https://dagger.dev).
package com.example.dagger.ui;

import com.example.dagger.data.local.DatabaseService;
import com.example.dagger.data.remote.NetworkService;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<DatabaseService> databaseServiceProvider;

  private final Provider<NetworkService> networkServiceProvider;

  public MainViewModel_Factory(Provider<DatabaseService> databaseServiceProvider,
      Provider<NetworkService> networkServiceProvider) {
    this.databaseServiceProvider = databaseServiceProvider;
    this.networkServiceProvider = networkServiceProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(databaseServiceProvider.get(), networkServiceProvider.get());
  }

  public static MainViewModel_Factory create(Provider<DatabaseService> databaseServiceProvider,
      Provider<NetworkService> networkServiceProvider) {
    return new MainViewModel_Factory(databaseServiceProvider, networkServiceProvider);
  }

  public static MainViewModel newInstance(DatabaseService databaseService,
      NetworkService networkService) {
    return new MainViewModel(databaseService, networkService);
  }
}
