// Generated by Dagger (https://dagger.dev).
package com.example.dagger.di.components;

import android.content.Context;
import com.example.dagger.MyApplication;
import com.example.dagger.MyApplication_MembersInjector;
import com.example.dagger.data.local.DatabaseService;
import com.example.dagger.data.local.DatabaseService_Factory;
import com.example.dagger.data.remote.NetworkService;
import com.example.dagger.data.remote.NetworkService_Factory;
import com.example.dagger.di.modules.ApplicationModule;
import com.example.dagger.di.modules.ApplicationModule_ProvideApiKeyFactory;
import com.example.dagger.di.modules.ApplicationModule_ProvideContextFactory;
import com.example.dagger.di.modules.ApplicationModule_ProvideDatabaseNameFactory;
import com.example.dagger.di.modules.ApplicationModule_ProvideVersionFactory;
import com.example.dagger.utils.NetworkHelper;
import com.example.dagger.utils.NetworkHelper_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final ApplicationModule applicationModule;

  private Provider<Context> provideContextProvider;

  private Provider<String> provideApiKeyProvider;

  private Provider<NetworkService> networkServiceProvider;

  private Provider<String> provideDatabaseNameProvider;

  private Provider<Integer> provideVersionProvider;

  private Provider<DatabaseService> databaseServiceProvider;

  private Provider<NetworkHelper> networkHelperProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam) {
    this.provideContextProvider = ApplicationModule_ProvideContextFactory.create(applicationModuleParam);
    this.provideApiKeyProvider = ApplicationModule_ProvideApiKeyFactory.create(applicationModuleParam);
    this.networkServiceProvider = DoubleCheck.provider(NetworkService_Factory.create(provideContextProvider, provideApiKeyProvider));
    this.provideDatabaseNameProvider = ApplicationModule_ProvideDatabaseNameFactory.create(applicationModuleParam);
    this.provideVersionProvider = ApplicationModule_ProvideVersionFactory.create(applicationModuleParam);
    this.databaseServiceProvider = DoubleCheck.provider(DatabaseService_Factory.create(provideContextProvider, provideDatabaseNameProvider, provideVersionProvider));
    this.networkHelperProvider = DoubleCheck.provider(NetworkHelper_Factory.create(provideContextProvider));
  }

  @Override
  public void inject(MyApplication myApplication) {
    injectMyApplication(myApplication);}

  @Override
  public Context getContext() {
    return ApplicationModule_ProvideContextFactory.provideContext(applicationModule);}

  @Override
  public NetworkService getNetworkService() {
    return networkServiceProvider.get();}

  @Override
  public DatabaseService getDatabaseService() {
    return databaseServiceProvider.get();}

  @Override
  public NetworkHelper getNetworkHelper() {
    return networkHelperProvider.get();}

  private MyApplication injectMyApplication(MyApplication instance) {
    MyApplication_MembersInjector.injectNetworkService(instance, networkServiceProvider.get());
    MyApplication_MembersInjector.injectDatabaseService(instance, databaseServiceProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerApplicationComponent(applicationModule);
    }
  }
}
