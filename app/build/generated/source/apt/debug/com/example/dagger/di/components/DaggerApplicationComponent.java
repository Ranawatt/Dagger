// Generated by Dagger (https://google.github.io/dagger).
package com.example.dagger.di.components;

import com.example.dagger.MyApplication;
import com.example.dagger.MyApplication_MembersInjector;
import com.example.dagger.data.local.DatabaseService;
import com.example.dagger.data.local.DatabaseService_Factory;
import com.example.dagger.data.remote.NetworkService;
import com.example.dagger.data.remote.NetworkService_Factory;
import com.example.dagger.di.modules.ApplicationModule;
import com.example.dagger.di.modules.ApplicationModule_ProvideApiKeyFactory;
import com.example.dagger.di.modules.ApplicationModule_ProvideContextFactory;
import com.example.dagger.di.modules.ApplicationModule_ProvideDatabaseNameFactory;
import com.example.dagger.di.modules.ApplicationModule_ProvideVersionFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private ApplicationModule_ProvideContextFactory provideContextProvider;

  private ApplicationModule_ProvideApiKeyFactory provideApiKeyProvider;

  private Provider<NetworkService> networkServiceProvider;

  private ApplicationModule_ProvideDatabaseNameFactory provideDatabaseNameProvider;

  private ApplicationModule_ProvideVersionFactory provideVersionProvider;

  private Provider<DatabaseService> databaseServiceProvider;

  private DaggerApplicationComponent(Builder builder) {

    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideContextProvider =
        ApplicationModule_ProvideContextFactory.create(builder.applicationModule);
    this.provideApiKeyProvider =
        ApplicationModule_ProvideApiKeyFactory.create(builder.applicationModule);
    this.networkServiceProvider =
        DoubleCheck.provider(
            NetworkService_Factory.create(provideContextProvider, provideApiKeyProvider));
    this.provideDatabaseNameProvider =
        ApplicationModule_ProvideDatabaseNameFactory.create(builder.applicationModule);
    this.provideVersionProvider =
        ApplicationModule_ProvideVersionFactory.create(builder.applicationModule);
    this.databaseServiceProvider =
        DoubleCheck.provider(
            DatabaseService_Factory.create(
                provideContextProvider, provideDatabaseNameProvider, provideVersionProvider));
  }

  @Override
  public void inject(MyApplication myApplication) {
    injectMyApplication(myApplication);
  }

  @Override
  public NetworkService getNetworkService() {
    return networkServiceProvider.get();
  }

  @Override
  public DatabaseService getDatabaseService() {
    return databaseServiceProvider.get();
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    MyApplication_MembersInjector.injectNetworkService(instance, networkServiceProvider.get());
    MyApplication_MembersInjector.injectDatabaseService(instance, databaseServiceProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {}

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }
  }
}
