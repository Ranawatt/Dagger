// Generated by Dagger (https://dagger.dev).
package com.example.dagger.data.local;

import android.content.Context;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseService_Factory implements Factory<DatabaseService> {
  private final Provider<Context> contextProvider;

  private final Provider<String> databaseNameProvider;

  private final Provider<Integer> versionsProvider;

  public DatabaseService_Factory(Provider<Context> contextProvider,
      Provider<String> databaseNameProvider, Provider<Integer> versionsProvider) {
    this.contextProvider = contextProvider;
    this.databaseNameProvider = databaseNameProvider;
    this.versionsProvider = versionsProvider;
  }

  @Override
  public DatabaseService get() {
    return newInstance(contextProvider.get(), databaseNameProvider.get(), versionsProvider.get());
  }

  public static DatabaseService_Factory create(Provider<Context> contextProvider,
      Provider<String> databaseNameProvider, Provider<Integer> versionsProvider) {
    return new DatabaseService_Factory(contextProvider, databaseNameProvider, versionsProvider);
  }

  public static DatabaseService newInstance(Context context, String databaseName,
      Integer versions) {
    return new DatabaseService(context, databaseName, versions);
  }
}
