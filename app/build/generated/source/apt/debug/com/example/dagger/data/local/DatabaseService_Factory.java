// Generated by Dagger (https://google.github.io/dagger).
package com.example.dagger.data.local;

import android.content.Context;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class DatabaseService_Factory implements Factory<DatabaseService> {
  private final Provider<Context> contextProvider;

  private final Provider<String> databaseNameProvider;

  private final Provider<Integer> versionsProvider;

  public DatabaseService_Factory(
      Provider<Context> contextProvider,
      Provider<String> databaseNameProvider,
      Provider<Integer> versionsProvider) {
    this.contextProvider = contextProvider;
    this.databaseNameProvider = databaseNameProvider;
    this.versionsProvider = versionsProvider;
  }

  @Override
  public DatabaseService get() {
    return provideInstance(contextProvider, databaseNameProvider, versionsProvider);
  }

  public static DatabaseService provideInstance(
      Provider<Context> contextProvider,
      Provider<String> databaseNameProvider,
      Provider<Integer> versionsProvider) {
    return new DatabaseService(
        contextProvider.get(), databaseNameProvider.get(), versionsProvider.get());
  }

  public static DatabaseService_Factory create(
      Provider<Context> contextProvider,
      Provider<String> databaseNameProvider,
      Provider<Integer> versionsProvider) {
    return new DatabaseService_Factory(contextProvider, databaseNameProvider, versionsProvider);
  }

  public static DatabaseService newDatabaseService(
      Context context, String databaseName, int versions) {
    return new DatabaseService(context, databaseName, versions);
  }
}
